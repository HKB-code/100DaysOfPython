What is Object-Oriented Programming (OOP)?
Object-Oriented Programming is a programming paradigm that uses "objects" to design software. These objects are instances of classes, which can contain both data (attributes or properties) and methods (functions).

Key Concepts of OOP:
Class and Object:

Class: A blueprint for creating objects. It defines a datatype by bundling data and methods that work on the data into one single unit.

Object: An instance of a class. It is a specific realization of a class.

Encapsulation:

Encapsulation is the concept of wrapping data (variables) and methods (functions) into a single unit called a class. It hides the internal state of the object and requires all interaction to be performed through an object's methods, improving security and simplicity.

Inheritance:

Inheritance is a mechanism where one class (child class) inherits the attributes and methods from another class (parent class). This allows for code reusability and the creation of a hierarchical relationship between classes.

Polymorphism:

Polymorphism means "many shapes" and allows methods to do different things based on the object it is acting upon. It can be achieved through method overriding and overloading.

Abstraction:

Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object. This simplifies interaction with the objects and helps manage complexity.